package main

import "fmt"

func main() {

	num1 := 10
	num2 := 010
	num3 := 0x11

	fmt.Println("输出10: ", num1, "\n 输出010: ", num2, "\n输出0x11: ", num3, "\n")

	// 输出二进制
	fmt.Printf("二进制010为%d", num1)

	// 位运算 &, 两个都为1 的时候才为1
	num4 := 2 & 3
	fmt.Println("2的补码是00000010, 3的补码是00000011, 2&3=00000010=2", num4)

	// 位运算 |, 两个都是0的时候才为0
	num5 := 2 | 3
	fmt.Println("2的补码是00000010, 3的补码是00000011, 2|3=00000011=3", num5)

	// 位运算 ^, 异或, 两个不同的时候才为1
	num6 := 2 ^ 3
	fmt.Println("2的补码是00000010, 3的补码是00000011, 2&3=00000001=1", num6)

	// 负数的补码= 反码+1, 反码= 符号位不变,其他变
	num7 := 2 & -2
	fmt.Println("2的补码是00000010, -2的原码是10000010, 反码是11111101, 补码是11111110, 2&-2 =00000010=2", num7)

	// 移位运算符,左移 <<  : 补码,符号位不变,其他移动
	num8 := 3 << 2
	fmt.Println("3的补码是00000011, 左边最开始的符号位0不变,11左移, 3<<2 = 00001100= 12", num8)

	// 移位运算符,右移 >>  : 补码,符号位不变,其他移动
	num9 := 3 >> 1
	fmt.Println("3的补码是00000011, 左边最开始的符号位0不变,11右移, 3>>1 = 00000001 = 1", num9)

	// 负数是补1
	num10 := -3 >> 1
	fmt.Println("-3的原码是10000011,-3的反码是11111100, 补码是11111101, 左边最开始的符号位1不变,剩余右移1位, -3>>1 = 11111110 => 111111101 => 10000010 =>  -2  ", num10)
}
